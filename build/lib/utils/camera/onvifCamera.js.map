{
  "version": 3,
  "sources": ["../../../../src/lib/utils/camera/onvifCamera.ts"],
  "sourcesContent": ["import { DeviceInformation, VideoSource, NotificationMessage, Cam as ICam } from \"./types/onvif\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { Cam } from \"onvif\";\nimport { EventEmitter } from \"stream\";\ntype CameraConfig = {\n  name: string;\n  ipAddress: string;\n  password: string;\n  streamUser: string;\n  streamPassword: string;\n\n  pullInterval?: number;\n  disableStreaming?: boolean;\n  disablePrivacyAccessory?: boolean;\n  disableAlarmAccessory?: boolean;\n  disableMotionAccessory?: boolean;\n  lowQuality?: boolean;\n};\nexport class OnvifCamera {\n  private events: EventEmitter | undefined;\n  private device: Cam | undefined;\n\n  private readonly kOnvifPort = 2020;\n\n  constructor(protected readonly config: CameraConfig) {}\n\n  private async getDevice(): Promise<ICam> {\n    return new Promise((resolve, reject) => {\n      if (this.device) {\n        return resolve(this.device);\n      }\n\n      const device: ICam = new Cam(\n        {\n          hostname: this.config.ipAddress,\n          username: this.config.streamUser,\n          password: this.config.streamPassword,\n          port: this.kOnvifPort,\n        },\n        (err: Error) => {\n          if (err) {\n            return reject(err);\n          }\n          this.device = device;\n          return resolve(this.device);\n        },\n      );\n    });\n  }\n\n  async getEventEmitter() {\n    if (this.events) {\n      return this.events;\n    }\n\n    const onvifDevice = await this.getDevice();\n\n    let lastMotionValue = false;\n\n    this.events = new EventEmitter();\n\n    onvifDevice.on(\"event\", (event: NotificationMessage) => {\n      if (event?.topic?._?.match(/RuleEngine\\/CellMotionDetector\\/Motion$/)) {\n        const motion = event.message.message.data.simpleItem.$.Value;\n        if (motion !== lastMotionValue) {\n          lastMotionValue = Boolean(motion);\n          this.events = this.events || new EventEmitter();\n          this.events.emit(\"motion\", motion);\n        }\n      }\n    });\n\n    return this.events;\n  }\n\n  async getVideoSource(): Promise<VideoSource> {\n    const onvifDevice = await this.getDevice();\n    return onvifDevice.videoSources[0];\n  }\n\n  async getDeviceInfo(): Promise<DeviceInformation> {\n    const onvifDevice = await this.getDevice();\n    return new Promise((resolve, reject) => {\n      onvifDevice.getDeviceInformation((err, deviceInformation) => {\n        if (err) return reject(err);\n        resolve(deviceInformation);\n      });\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAAA,gBAAoB;AACpB,oBAA6B;AAetB,MAAM,YAAY;AAAA,EAMvB,YAA+B,QAAsB;AAAtB;AAF/B,SAAiB,aAAa;AAAA,EAEwB;AAAA,EAEtD,MAAc,YAA2B;AACvC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,KAAK,QAAQ;AACf,eAAO,QAAQ,KAAK,MAAM;AAAA,MAC5B;AAEA,YAAM,SAAe,IAAI;AAAA,QACvB;AAAA,UACE,UAAU,KAAK,OAAO;AAAA,UACtB,UAAU,KAAK,OAAO;AAAA,UACtB,UAAU,KAAK,OAAO;AAAA,UACtB,MAAM,KAAK;AAAA,QACb;AAAA,QACA,CAAC,QAAe;AACd,cAAI,KAAK;AACP,mBAAO,OAAO,GAAG;AAAA,UACnB;AACA,eAAK,SAAS;AACd,iBAAO,QAAQ,KAAK,MAAM;AAAA,QAC5B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,kBAAkB;AACtB,QAAI,KAAK,QAAQ;AACf,aAAO,KAAK;AAAA,IACd;AAEA,UAAM,cAAc,MAAM,KAAK,UAAU;AAEzC,QAAI,kBAAkB;AAEtB,SAAK,SAAS,IAAI,2BAAa;AAE/B,gBAAY,GAAG,SAAS,CAAC,UAA+B;AA9D5D;AA+DM,WAAI,0CAAO,UAAP,mBAAc,MAAd,mBAAiB,MAAM,4CAA4C;AACrE,cAAM,SAAS,MAAM,QAAQ,QAAQ,KAAK,WAAW,EAAE;AACvD,YAAI,WAAW,iBAAiB;AAC9B,4BAAkB,QAAQ,MAAM;AAChC,eAAK,SAAS,KAAK,UAAU,IAAI,2BAAa;AAC9C,eAAK,OAAO,KAAK,UAAU,MAAM;AAAA,QACnC;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,iBAAuC;AAC3C,UAAM,cAAc,MAAM,KAAK,UAAU;AACzC,WAAO,YAAY,aAAa;AAAA,EAClC;AAAA,EAEA,MAAM,gBAA4C;AAChD,UAAM,cAAc,MAAM,KAAK,UAAU;AACzC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,kBAAY,qBAAqB,CAAC,KAAK,sBAAsB;AAC3D,YAAI;AAAK,iBAAO,OAAO,GAAG;AAC1B,gBAAQ,iBAAiB;AAAA,MAC3B,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": ["import_onvif"]
}
