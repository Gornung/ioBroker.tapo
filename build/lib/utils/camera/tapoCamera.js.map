{
  "version": 3,
  "sources": ["../../../../src/lib/utils/camera/tapoCamera.ts"],
  "sourcesContent": ["import crypto from \"crypto\";\nimport https, { Agent } from \"https\";\nimport fetch from \"node-fetch\";\nimport { OnvifCamera } from \"./onvifCamera\";\n\ntype CameraConfig = {\n  name: string;\n  ipAddress: string;\n  password: string;\n  streamUser: string;\n  streamPassword: string;\n\n  pullInterval?: number;\n  disableStreaming?: boolean;\n  disablePrivacyAccessory?: boolean;\n  disableAlarmAccessory?: boolean;\n  disableMotionAccessory?: boolean;\n  lowQuality?: boolean;\n};\nexport class TAPOCamera extends OnvifCamera {\n  private readonly kTokenExpiration = 1000 * 60 * 60; // 1h\n  private readonly kStreamPort = 554;\n  private readonly httpsAgent: Agent;\n\n  private readonly hashedPassword: string;\n  private token: [string, number] | undefined;\n  private tokenPromise: (() => Promise<string>) | undefined;\n\n  constructor(protected readonly log: any, protected readonly config: CameraConfig) {\n    super(log, config);\n    this.log.debug(\"Constructing Camera on host: \" + config.ipAddress);\n\n    this.httpsAgent = new https.Agent({\n      rejectUnauthorized: false,\n    });\n    this.hashedPassword = crypto.createHash(\"md5\").update(config.password).digest(\"hex\").toUpperCase();\n  }\n\n  fetch(url: string, data: object) {\n    return fetch(url, {\n      ...data,\n      agent: this.httpsAgent,\n    });\n  }\n\n  getTapoAPICredentials() {\n    return {\n      username: \"admin\",\n      password: this.hashedPassword,\n    };\n  }\n\n  getAuthenticatedStreamUrl(lowQuality: boolean) {\n    const prefix = `rtsp://${this.config.streamUser}:${this.config.streamPassword}@${this.config.ipAddress}:${this.kStreamPort}`;\n    return lowQuality ? `${prefix}/stream2` : `${prefix}/stream1`;\n  }\n\n  private async fetchToken(): Promise<string> {\n    this.log.debug(`[${this.config.name}]`, \"Fetching new token\");\n\n    const response = await this.fetch(`https://${this.config.ipAddress}/`, {\n      method: \"post\",\n      body: JSON.stringify({\n        method: \"login\",\n        params: this.getTapoAPICredentials(),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const json = (await response.json()) as {\n      result: { stok: string; user_group: string };\n      error_code: number;\n    };\n\n    if (!json.result.stok) {\n      throw new Error(\n        \"Unable to find token in response, probably your credentials are not valid. Please make sure you set your TAPO Cloud password\",\n      );\n    }\n\n    return json.result.stok;\n  }\n\n  async getToken(): Promise<string> {\n    if (this.token && this.token[1] + this.kTokenExpiration > Date.now()) {\n      return this.token[0];\n    }\n\n    if (this.tokenPromise) {\n      return this.tokenPromise();\n    }\n\n    this.tokenPromise = async () => {\n      try {\n        this.log.debug(`[${this.config.name}]`, \"Token is expired , requesting new one.\");\n\n        const token = await this.fetchToken();\n        this.token = [token, Date.now()];\n        return token;\n      } finally {\n        this.tokenPromise = undefined;\n      }\n    };\n    return this.tokenPromise();\n  }\n\n  private async getTAPOCameraAPIUrl() {\n    const token = await this.getToken();\n    return `https://${this.config.ipAddress}/stok=${token}/ds`;\n  }\n\n  private pendingAPIRequests: Map<string, Promise<TAPOCameraResponse>> = new Map();\n\n  private async makeTAPOAPIRequest(req: TAPOCameraRequest) {\n    const reqJson = JSON.stringify(req);\n\n    if (this.pendingAPIRequests.has(reqJson)) {\n      return this.pendingAPIRequests.get(reqJson) as Promise<TAPOCameraResponse>;\n    }\n\n    this.log.debug(\n      `[${this.config.name}]`,\n      \"Making new request req =\",\n      req.params.requests.map((e) => e.method),\n    );\n\n    this.pendingAPIRequests.set(\n      reqJson,\n      (async () => {\n        try {\n          const url = await this.getTAPOCameraAPIUrl();\n\n          const response = await this.fetch(url, {\n            method: \"post\",\n            body: JSON.stringify(req),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }).catch((e: Error) => {\n            this.log.warn(\"makeTAPOAPIRequest error: \", e);\n            return;\n          });\n          const json = (await response.json()) as TAPOCameraResponse;\n          this.log.debug(`makeTAPOAPIRequest url: ${url}, json: ${JSON.stringify(json)}`);\n          if (json.error_code !== 0) {\n            // Because of the token error when the camera comes back from no response.\n            this.log.info(\"Reset token. error_code: \", json.error_code);\n            this.token = undefined;\n          }\n\n          return json;\n        } finally {\n          this.pendingAPIRequests.delete(reqJson);\n        }\n      })(),\n    );\n\n    return this.pendingAPIRequests.get(reqJson) as Promise<TAPOCameraResponse>;\n  }\n\n  async setLensMaskConfig(value: boolean) {\n    const json = await this.makeTAPOAPIRequest({\n      method: \"multipleRequest\",\n      params: {\n        requests: [\n          {\n            method: \"setLensMaskConfig\",\n            params: {\n              lens_mask: {\n                lens_mask_info: {\n                  enabled: value ? \"on\" : \"off\",\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    return json.error_code !== 0;\n  }\n\n  async setAlertConfig(value: boolean) {\n    const json = await this.makeTAPOAPIRequest({\n      method: \"multipleRequest\",\n      params: {\n        requests: [\n          {\n            method: \"setAlertConfig\",\n            params: {\n              msg_alarm: {\n                chn1_msg_alarm_info: {\n                  enabled: value ? \"on\" : \"off\",\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    return json.error_code !== 0;\n  }\n  async setForceWhitelampState(value: boolean) {\n    const json = await this.makeTAPOAPIRequest({\n      method: \"multipleRequest\",\n      params: {\n        requests: [\n          {\n            method: \"setForceWhitelampState\",\n            params: {\n              image: {\n                switch: {\n                  force_wtl_state: value ? \"on\" : \"off\",\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    return json.error_code !== 0;\n  }\n\n  async getTAPODeviceInfo() {\n    const json = await this.makeTAPOAPIRequest({\n      method: \"multipleRequest\",\n      params: {\n        requests: [\n          {\n            method: \"getDeviceInfo\",\n            params: {\n              device_info: {\n                name: [\"basic_info\"],\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    const info = json.result.responses[0] as TAPOCameraResponseDeviceInfo;\n    return info.result.device_info.basic_info;\n  }\n\n  async getStatus(): Promise<{ lensMask: boolean; alert: boolean; forceWhiteLamp: boolean }> {\n    const json = await this.makeTAPOAPIRequest({\n      method: \"multipleRequest\",\n      params: {\n        requests: [\n          {\n            method: \"getAlertConfig\",\n            params: {\n              msg_alarm: {\n                name: \"chn1_msg_alarm_info\",\n              },\n            },\n          },\n          {\n            method: \"getLensMaskConfig\",\n            params: {\n              lens_mask: {\n                name: \"lens_mask_info\",\n              },\n            },\n          },\n          {\n            method: \"getForceWhitelampState\",\n            params: {\n              image: {\n                name: \"switch\",\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (json.error_code !== 0) {\n      throw new Error(\"Camera replied with error\");\n    }\n\n    const alertConfig = json.result.responses.find((r) => r.method === \"getAlertConfig\") as TAPOCameraResponseGetAlert;\n\n    const forceWhitelampState = json.result.responses.find(\n      (r) => r.method === \"getForceWhitelampState\",\n    ) as TAPOCameraResponseGetForce;\n    const lensMaskConfig = json.result.responses.find(\n      (r) => r.method === \"getLensMaskConfig\",\n    ) as TAPOCameraResponseGetLensMask;\n\n    return {\n      alert: alertConfig.result.msg_alarm.chn1_msg_alarm_info.enabled === \"on\",\n      lensMask: lensMaskConfig.result.lens_mask.lens_mask_info.enabled === \"on\",\n      forceWhiteLamp: forceWhitelampState.result.image\n        ? forceWhitelampState.result.image.switch.force_wtl_state === \"on\"\n        : false,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["https", "crypto", "fetch"]
}
