{
  "version": 3,
  "sources": ["../../../src/lib/utils/p110.ts"],
  "sourcesContent": ["import { EnergyUsage } from \"./energyUsage\";\nimport P100 from \"./p100\";\nimport { ConsumptionInfo } from \"./types\";\n\nexport default class P110 extends P100 {\n\n  private _consumption!:ConsumptionInfo;\n\n  constructor(\n    public readonly log: any,\n    public readonly ipAddress: string,\n    public readonly email: string,\n    public readonly password: string,\n    public readonly timeout: number,\n  ) {\n    super(log, ipAddress, email, password, timeout);\n    this.log.info(\"Constructing P110 on host: \" + ipAddress);\n  }\n\n  async getEnergyUsage():Promise<EnergyUsage>{        \n    const payload = '{'+\n        '\"method\": \"get_energy_usage\",'+\n        '\"requestTimeMils\": ' + Math.round(Date.now() * 1000) + ''+\n        '};';\n     \n    if(this.is_klap){\n      return this.handleKlapRequest(payload).then((response)=>{\n        if(response && response.result){\n          this._consumption = {\n            current: Math.ceil(response.result.current_power / 1000),\n            total: response.result.today_energy / 1000,\n          };\n        } else{\n          this._consumption = {\n            current: 0,\n            total: 0,\n          };\n        }\n           \n        return response.result;\n      });\n    }else{\n      return this.handleRequest(payload).then((response)=>{\n        if(response && response.result){\n          this._consumption = {\n            current: Math.ceil(response.result.current_power / 1000),\n            total: response.result.today_energy / 1000,\n          };\n        } else{\n          this._consumption = {\n            current: 0,\n            total: 0,\n          };\n        }\n           \n        return response.result;\n      });\n    }\n    \n  }\n\n  public getPowerConsumption():ConsumptionInfo{\n    return this._consumption;\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAiB;AAGjB,MAAO,aAA2B,YAAAA,QAAK;AAAA,EAIrC,YACkB,KACA,WACA,OACA,UACA,SAChB;AACA,UAAM,KAAK,WAAW,OAAO,UAAU,OAAO;AAN9B;AACA;AACA;AACA;AACA;AAGhB,SAAK,IAAI,KAAK,gCAAgC,SAAS;AAAA,EACzD;AAAA,EAEA,MAAM,iBAAqC;AACzC,UAAM,UAAU,sDAEY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,IACpD;AAEJ,QAAG,KAAK,SAAQ;AACd,aAAO,KAAK,kBAAkB,OAAO,EAAE,KAAK,CAAC,aAAW;AACtD,YAAG,YAAY,SAAS,QAAO;AAC7B,eAAK,eAAe;AAAA,YAClB,SAAS,KAAK,KAAK,SAAS,OAAO,gBAAgB,GAAI;AAAA,YACvD,OAAO,SAAS,OAAO,eAAe;AAAA,UACxC;AAAA,QACF,OAAM;AACJ,eAAK,eAAe;AAAA,YAClB,SAAS;AAAA,YACT,OAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO,SAAS;AAAA,MAClB,CAAC;AAAA,IACH,OAAK;AACH,aAAO,KAAK,cAAc,OAAO,EAAE,KAAK,CAAC,aAAW;AAClD,YAAG,YAAY,SAAS,QAAO;AAC7B,eAAK,eAAe;AAAA,YAClB,SAAS,KAAK,KAAK,SAAS,OAAO,gBAAgB,GAAI;AAAA,YACvD,OAAO,SAAS,OAAO,eAAe;AAAA,UACxC;AAAA,QACF,OAAM;AACJ,eAAK,eAAe;AAAA,YAClB,SAAS;AAAA,YACT,OAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO,SAAS;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,EAEF;AAAA,EAEO,sBAAqC;AAC1C,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": ["P100"]
}
