{
  "version": 3,
  "sources": ["../../../src/lib/utils/tpLinkCipher.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport crypto from \"crypto\";\n\nexport default class TpLinkCipher {\n  public iv: any;\n  public key: any;\n  private _crypto = crypto;\n\n  constructor(\n    public readonly log: any,\n    b_arr: any,\n    b_arr2: any,\n  ) {\n    this.iv = b_arr2;\n    this.key = b_arr;\n  }\n\n  public static mime_encoder(to_encode: string) {\n    const base64data = Buffer.from(to_encode).toString(\"base64\");\n    return base64data;\n  }\n\n  public encrypt(data: string) {\n    const cipher = this._crypto.createCipheriv(\"aes-128-cbc\", this.key, this.iv);\n    let encrypted = cipher.update(data, \"utf8\", \"base64\");\n    encrypted += cipher.final(\"base64\");\n    return encrypted;\n  }\n\n  public decrypt(data: string) {\n    const decipher = this._crypto.createDecipheriv(\"aes-128-cbc\", this.key, this.iv);\n    let decrypted = decipher.update(data, \"base64\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    return decrypted;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAmB;AAEnB,MAAO,aAA2B;AAAA,EAKhC,YACkB,KAChB,OACA,QACA;AAHgB;AAHlB,SAAQ,UAAU,cAAAA;AAOhB,SAAK,KAAK;AACV,SAAK,MAAM;AAAA,EACb;AAAA,EAEA,OAAc,aAAa,WAAmB;AAC5C,UAAM,aAAa,OAAO,KAAK,SAAS,EAAE,SAAS,QAAQ;AAC3D,WAAO;AAAA,EACT;AAAA,EAEO,QAAQ,MAAc;AAC3B,UAAM,SAAS,KAAK,QAAQ,eAAe,eAAe,KAAK,KAAK,KAAK,EAAE;AAC3E,QAAI,YAAY,OAAO,OAAO,MAAM,QAAQ,QAAQ;AACpD,iBAAa,OAAO,MAAM,QAAQ;AAClC,WAAO;AAAA,EACT;AAAA,EAEO,QAAQ,MAAc;AAC3B,UAAM,WAAW,KAAK,QAAQ,iBAAiB,eAAe,KAAK,KAAK,KAAK,EAAE;AAC/E,QAAI,YAAY,SAAS,OAAO,MAAM,UAAU,MAAM;AACtD,iBAAa,SAAS,MAAM,MAAM;AAClC,WAAO;AAAA,EACT;AACF;",
  "names": ["crypto"]
}
