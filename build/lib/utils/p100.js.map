{
  "version": 3,
  "sources": ["../../../src/lib/utils/p100.ts"],
  "sourcesContent": ["import { AxiosResponse } from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport NewTpLinkCipher from \"./newTpLinkCipher\";\nimport TpLinkCipher from \"./tpLinkCipher\";\nimport { PlugSysinfo } from \"./types\";\n\nexport default class P100 {\n  private crypto = require(\"crypto\");\n  protected axios = require(\"axios\");\n  private utf8 = require(\"utf8\");\n  public is_klap = false;\n\n  private encodedPassword!: string;\n  private encodedEmail!: string;\n  private privateKey!: string;\n  private publicKey!: string;\n  protected ip: string;\n  protected cookie!: string;\n  protected token!: string;\n  protected terminalUUID: string;\n  private _plugSysInfo!: PlugSysinfo;\n  private _reconnect_counter: number;\n  protected _timeout!: number;\n\n  protected tpLinkCipher!: TpLinkCipher;\n  protected newTpLinkCipher!: NewTpLinkCipher;\n\n  protected ERROR_CODES = {\n    \"0\": \"Success\",\n    \"-1010\": \"Invalid Public Key Length\",\n    \"-1012\": \"Invalid terminalUUID\",\n    \"-1501\": \"Invalid Request or Credentials\",\n    \"1002\": \"Incorrect Request\",\n    \"-1003\": \"JSON formatting error \",\n    \"9999\": \"Session Timeout\",\n    \"-1301\": \"Device Error\",\n    \"1100\": \"Handshake Failed\",\n    \"1111\": \"Login Failed\",\n    \"1112\": \"Http Transport Failed\",\n    \"1200\": \"Multiple Requests Failed\",\n    \"-1004\": \"JSON Encode Failed\",\n    \"-1005\": \"AES Decode Failed\",\n    \"-1006\": \"Request Length Error\",\n    \"-2101\": \"Account Error\",\n    \"-1\": \"ERR_COMMON_FAILED\",\n    \"1000\": \"ERR_NULL_TRANSPORT\",\n    \"1001\": \"ERR_CMD_COMMAND_CANCEL\",\n    \"-1001\": \"ERR_UNSPECIFIC\",\n    \"-1002\": \"ERR_UNKNOWN_METHOD\",\n    \"-1007\": \"ERR_CLOUD_FAILED\",\n    \"-1008\": \"ERR_PARAMS\",\n    \"-1101\": \"ERR_SESSION_PARAM\",\n    \"-1201\": \"ERR_QUICK_SETUP\",\n    \"-1302\": \"ERR_DEVICE_NEXT_EVENT\",\n    \"-1401\": \"ERR_FIRMWARE\",\n    \"-1402\": \"ERR_FIRMWARE_VER_ERROR\",\n    \"-1601\": \"ERR_TIME\",\n    \"-1602\": \"ERR_TIME_SYS\",\n    \"-1603\": \"ERR_TIME_SAVE\",\n    \"-1701\": \"ERR_WIRELESS\",\n    \"-1702\": \"ERR_WIRELESS_UNSUPPORTED\",\n    \"-1801\": \"ERR_SCHEDULE\",\n    \"-1802\": \"ERR_SCHEDULE_FULL\",\n    \"-1803\": \"ERR_SCHEDULE_CONFLICT\",\n    \"-1804\": \"ERR_SCHEDULE_SAVE\",\n    \"-1805\": \"ERR_SCHEDULE_INDEX\",\n    \"-1901\": \"ERR_COUNTDOWN\",\n    \"-1902\": \"ERR_COUNTDOWN_CONFLICT\",\n    \"-1903\": \"ERR_COUNTDOWN_SAVE\",\n    \"-2001\": \"ERR_ANTITHEFT\",\n    \"-2002\": \"ERR_ANTITHEFT_CONFLICT\",\n    \"-2003\": \"ERR_ANTITHEFT_SAVE\",\n    \"-2201\": \"ERR_STAT\",\n    \"-2202\": \"ERR_STAT_SAVE\",\n    \"-2301\": \"ERR_DST\",\n    \"-2302\": \"ERR_DST_SAVE\",\n    \"1003\": \"KLAP\",\n  };\n\n  constructor(\n    public readonly log: any,\n    public readonly ipAddress: string,\n    public readonly email: string,\n    public readonly password: string,\n    public readonly timeout: number,\n  ) {\n    this.log.debug(\"Constructing P100 on host: \" + ipAddress);\n    this.ip = ipAddress;\n    this.encryptCredentials(email, password);\n    this.createKeyPair();\n    this.terminalUUID = uuidv4();\n    this._reconnect_counter = 0;\n    this._timeout = timeout;\n  }\n\n  private encryptCredentials(email: string, password: string) {\n    //Password Encoding\n    this.encodedPassword = TpLinkCipher.mime_encoder(password);\n\n    //Email Encoding\n    this.encodedEmail = this.sha_digest_username(email);\n    this.encodedEmail = TpLinkCipher.mime_encoder(this.encodedEmail);\n  }\n\n  private sha_digest_username(data: string): string {\n    const digest = this.crypto.createHash(\"sha1\").update(data).digest(\"hex\");\n\n    return digest;\n  }\n\n  private calc_auth_hash(username: string, password: string): Buffer {\n    const usernameDigest = this.crypto\n      .createHash(\"sha1\")\n      .update(Buffer.from(username.normalize(\"NFKC\")))\n      .digest();\n    const passwordDigest = this.crypto\n      .createHash(\"sha1\")\n      .update(Buffer.from(password.normalize(\"NFKC\")))\n      .digest();\n    const digest = this.crypto\n      .createHash(\"sha256\")\n      .update(Buffer.concat([usernameDigest, passwordDigest]))\n      .digest();\n    return digest;\n  }\n\n  private createKeyPair() {\n    // Including publicKey and  privateKey from\n    // generateKeyPairSync() method with its\n    // parameters\n    const { publicKey, privateKey } = this.crypto.generateKeyPairSync(\"rsa\", {\n      publicKeyEncoding: {\n        type: \"spki\",\n        format: \"pem\",\n      },\n      privateKeyEncoding: {\n        type: \"pkcs1\",\n        format: \"pem\",\n      },\n      modulusLength: 1024,\n    });\n\n    this.privateKey = privateKey;\n    this.publicKey = publicKey.toString(\"utf8\");\n  }\n\n  async handshake(): Promise<any> {\n    const URL = \"http://\" + this.ip + \"/app\";\n    const payload = {\n      method: \"handshake\",\n      params: {\n        key: this.publicKey,\n        requestTimeMils: Math.round(Date.now() * 1000),\n      },\n    };\n    this.log.debug(\"Handshake P100 on host: \" + this.ip);\n\n    const headers = {\n      Connection: \"Keep-Alive\",\n    };\n    const config = {\n      timeout: 5000,\n      headers: headers,\n    };\n\n    await this.axios\n      .post(URL, payload, config)\n      .then((res: AxiosResponse) => {\n        this.log.debug(\"Received Handshake P100 on host response: \" + this.ip);\n\n        if (res.data.error_code) {\n          return this.handleError(res.data.error_code, \"97\");\n        }\n\n        try {\n          const encryptedKey = res.data.result.key.toString(\"utf8\");\n          this.decode_handshake_key(encryptedKey);\n          this.cookie = res.headers[\"set-cookie\"][0].split(\";\")[0];\n          return;\n        } catch (error) {\n          return this.handleError(res.data.error_code, \"106\");\n        }\n      })\n      .catch((error: Error) => {\n        this.log.error(\"111 Error: \" + error ? error.message : \"\");\n        return error;\n      });\n  }\n\n  async login(): Promise<void> {\n    const URL = \"http://\" + this.ip + \"/app\";\n    const payload =\n      \"{\" +\n      '\"method\": \"login_device\",' +\n      '\"params\": {' +\n      '\"username\": \"' +\n      this.encodedEmail +\n      '\",' +\n      '\"password\": \"' +\n      this.encodedPassword +\n      '\"' +\n      \"},\" +\n      '\"requestTimeMils\": ' +\n      Math.round(Date.now() * 1000) +\n      \"\" +\n      \"};\";\n\n    const headers = {\n      Cookie: this.cookie,\n      Connection: \"Keep-Alive\",\n    };\n\n    if (this.tpLinkCipher) {\n      const encryptedPayload = this.tpLinkCipher.encrypt(payload);\n\n      const securePassthroughPayload = {\n        method: \"securePassthrough\",\n        params: {\n          request: encryptedPayload,\n        },\n      };\n\n      const config = {\n        headers: headers,\n        timeout: this._timeout * 1000,\n      };\n\n      await this.axios\n        .post(URL, securePassthroughPayload, config)\n        .then((res: AxiosResponse) => {\n          if (res.data.error_code) {\n            return this.handleError(res.data.error_code, \"146\");\n          }\n          const decryptedResponse = this.tpLinkCipher.decrypt(res.data.result.response);\n          try {\n            const response = JSON.parse(decryptedResponse);\n            if (response.error_code !== 0) {\n              return this.handleError(res.data.error_code, \"152\");\n            }\n            this.token = response.result.token;\n            return;\n          } catch (error) {\n            return this.handleError(JSON.parse(decryptedResponse).error_code, \"157\");\n          }\n        })\n        .catch((error: Error) => {\n          this.log.error(\"Error Login: \" + error ? error.message : \"\");\n          return error;\n        });\n    }\n  }\n\n  async raw_request(path: string, data: Buffer, responseType: string, params?: any): Promise<any> {\n    const URL = \"http://\" + this.ip + \"/app/\" + path;\n\n    const headers = {\n      Connection: \"Keep-Alive\",\n      Host: this.ip,\n      Accept: \"*/*\",\n      \"Content-Type\": \"application/octet-stream\",\n      \"User-Agent\": \"ioBroker\",\n    };\n\n    if (this.cookie) {\n      headers[\"Cookie\"] = this.cookie;\n    }\n\n    const config = {\n      timeout: 5000,\n      responseType: responseType,\n      headers: headers,\n      params: params,\n    };\n    return this.axios\n      .post(URL, data, config)\n      .then((res: AxiosResponse) => {\n        this.log.debug(\"Received request on host \" + URL);\n        this.log.debug(JSON.stringify(res.data));\n        if (res.data.error_code) {\n          this.log.debug(\"Found error code: \" + res.data.error_code);\n          return this.handleError(res.data.error_code, \"309\");\n        }\n        this.log.debug(\"Try to parse headers\");\n        try {\n          if (res.headers && res.headers[\"set-cookie\"]) {\n            this.cookie = res.headers[\"set-cookie\"][0].split(\";\")[0];\n          }\n          this.log.debug(\"Return data\");\n          return res.data;\n        } catch (error) {\n          return this.handleError(res.data.error_code, \"318\");\n        }\n      })\n      .catch(async (error: Error) => {\n        this.log.debug(JSON.stringify(error));\n        this.log.error(\"322 Error: \" + error ? error.message : \"\");\n        if (this._reconnect_counter <= 3) {\n          this.log.info(\"Trying to reconnect...\");\n          await this.newReconnect();\n        }\n        return error;\n      });\n  }\n\n  async handshake_new(): Promise<void> {\n    const local_seed = this.crypto.randomBytes(16);\n\n    await this.raw_request(\"handshake1\", local_seed, \"arraybuffer\").then((res) => {\n      if (!res) {\n        this.log.debug(\"Empty response\");\n        return;\n      }\n      const remote_seed: Buffer = res.subarray(0, 16);\n      const server_hash: Buffer = res.subarray(16);\n      this.log.debug(\"Received remote seed\" + remote_seed.toString(\"hex\"));\n      this.log.debug(\"Received server hash\" + server_hash.toString(\"hex\"));\n      let auth_hash: any = undefined;\n      const ah = this.calc_auth_hash(this.email, this.password);\n      this.log.debug(\"Calculated auth hash\" + ah.toString(\"hex\"));\n      const local_seed_auth_hash = this.crypto\n        .createHash(\"sha256\")\n        .update(Buffer.concat([local_seed, remote_seed, ah]))\n        .digest();\n\n      if (local_seed_auth_hash.toString(\"hex\") === server_hash.toString(\"hex\")) {\n        this.log.debug(\"Handshake 1 successful\");\n        auth_hash = ah;\n      } else {\n        this.log.warn(\"Handshake 1 failed\");\n        auth_hash = this.calc_auth_hash(this.email, this.password + this.password);\n      }\n      const req = this.crypto\n        .createHash(\"sha256\")\n        .update(Buffer.concat([remote_seed, local_seed, auth_hash]))\n        .digest();\n\n      return this.raw_request(\"handshake2\", req, \"text\").then((res) => {\n        this.log.debug(\"Handshake 2 successful\");\n\n        this.newTpLinkCipher = new NewTpLinkCipher(local_seed, remote_seed, auth_hash);\n        this.log.debug(\"Init cipher successful\");\n\n        return;\n      });\n    });\n  }\n\n  private decode_handshake_key(key: string) {\n    const buff = Buffer.from(key, \"base64\");\n\n    const decoded = this.crypto.privateDecrypt(\n      {\n        key: this.privateKey,\n        padding: this.crypto.constants.RSA_PKCS1_PADDING,\n      },\n      buff,\n    );\n\n    const b_arr = decoded.slice(0, 16);\n    const b_arr2 = decoded.slice(16, 32);\n\n    this.tpLinkCipher = new TpLinkCipher(this.log, b_arr, b_arr2);\n  }\n\n  async turnOff(): Promise<boolean> {\n    const payload =\n      \"{\" +\n      '\"method\": \"set_device_info\",' +\n      '\"params\": {' +\n      '\"device_on\": false' +\n      \"},\" +\n      '\"terminalUUID\": \"' +\n      this.terminalUUID +\n      '\",' +\n      '\"requestTimeMils\": ' +\n      Math.round(Date.now() * 1000) +\n      \"\" +\n      \"};\";\n    return this.sendRequest(payload);\n  }\n\n  async turnOn(): Promise<boolean> {\n    const payload =\n      \"{\" +\n      '\"method\": \"set_device_info\",' +\n      '\"params\": {' +\n      '\"device_on\": true' +\n      \"},\" +\n      '\"terminalUUID\": \"' +\n      this.terminalUUID +\n      '\",' +\n      '\"requestTimeMils\": ' +\n      Math.round(Date.now() * 1000) +\n      \"\" +\n      \"};\";\n\n    return this.sendRequest(payload);\n  }\n\n  async setPowerState(state: boolean): Promise<boolean> {\n    if (state) {\n      return this.turnOn();\n    } else {\n      return this.turnOff();\n    }\n  }\n\n  async getDeviceInfo(): Promise<PlugSysinfo> {\n    if (this.getSysInfo() && Date.now() - this.getSysInfo().last_update < 2000) {\n      return new Promise((resolve) => {\n        resolve(this.getSysInfo());\n      });\n    }\n    const URL = \"http://\" + this.ip + \"/app?token=\" + this.token;\n\n    const payload = \"{\" + '\"method\": \"get_device_info\",' + '\"requestTimeMils\": ' + Math.round(Date.now() * 1000) + \"\" + \"};\";\n    const headers = {\n      Cookie: this.cookie,\n    };\n\n    if (this.tpLinkCipher) {\n      this.log.debug(\"using old cypher\");\n      const encryptedPayload = this.tpLinkCipher.encrypt(payload);\n\n      const securePassthroughPayload = {\n        method: \"securePassthrough\",\n        params: {\n          request: encryptedPayload,\n        },\n      };\n\n      const config = {\n        headers: headers,\n        timeout: this._timeout * 1000,\n      };\n\n      return this.axios\n        .post(URL, securePassthroughPayload, config)\n        .then((res: any) => {\n          this.log.debug(JSON.stringify(res.data));\n          if (res.data.error_code) {\n            if ((res.data.error_code === \"9999\" || res.data.error_code === 9999) && this._reconnect_counter <= 3) {\n              this.log.debug(\" Error Code: \" + res.data.error_code + \", \" + this.ERROR_CODES[res.data.error_code]);\n              this.log.debug(\"Trying to reconnect...\");\n              return this.reconnect().then(() => {\n                return this.getDeviceInfo();\n              });\n            }\n            this._reconnect_counter = 0;\n            return this.handleError(res.data.error_code, \"326\");\n          }\n\n          const decryptedResponse = this.tpLinkCipher.decrypt(res.data.result.response);\n          try {\n            const response = JSON.parse(decryptedResponse);\n            if (response.error_code !== 0) {\n              return this.handleError(response.error_code, \"333\");\n            }\n            this.setSysInfo(response.result);\n            this.log.debug(\"Device Info: \", response.result);\n\n            return this.getSysInfo();\n          } catch (error) {\n            this.log.debug(error.stack);\n            return this.handleError(JSON.parse(decryptedResponse).error_code, \"340\");\n          }\n        })\n        .catch((error: Error) => {\n          this.log.error(\"371 Error: \" + error ? error.message : \"\");\n          return error;\n        });\n    } else if (this.newTpLinkCipher) {\n      this.log.debug(\"using new cypher\");\n      const data = this.newTpLinkCipher.encrypt(payload);\n\n      const URL = \"http://\" + this.ip + \"/app/\" + \"request\";\n      const headers = {\n        Connection: \"Keep-Alive\",\n        Host: this.ip,\n        Accept: \"*/*\",\n        \"Content-Type\": \"application/octet-stream\",\n      };\n\n      if (this.cookie) {\n        headers[\"Cookie\"] = this.cookie;\n      }\n\n      const config = {\n        timeout: 5000,\n        responseType: \"arraybuffer\",\n        headers: headers,\n        params: { seq: data.seq.toString() },\n      };\n      return this.axios\n        .post(URL, data.encryptedPayload, config)\n        .then((res: AxiosResponse) => {\n          this.log.debug(JSON.stringify(res.data));\n          if (res.data.error_code) {\n            return this.handleError(res.data.error_code, \"309\");\n          }\n\n          try {\n            if (res.headers && res.headers[\"set-cookie\"]) {\n              this.cookie = res.headers[\"set-cookie\"][0].split(\";\")[0];\n            }\n\n            const response = JSON.parse(this.newTpLinkCipher.decrypt(res.data));\n\n            this.log.debug(\"Device Info: \" + JSON.stringify(response));\n            if (response.error_code !== 0) {\n              return this.handleError(response.error_code, \"333\");\n            }\n            this.setSysInfo(response.result);\n\n            return this.getSysInfo();\n          } catch (error) {\n            return this.handleError(res.data.error_code, \"480\");\n          }\n        })\n        .catch(async (error: Error) => {\n          this.log.error(\"322 #2 Error: \" + error ? error.message : \"\");\n          if (this._reconnect_counter <= 3) {\n            this.log.info(\"Trying to reconnect...\");\n            await this.newReconnect();\n          }\n        });\n    } else {\n      return new Promise<PlugSysinfo>((resolve, reject) => {\n        reject();\n      });\n    }\n  }\n\n  /**\n   * Cached value of `sysinfo.device_id`  if set.\n   */\n  get id(): string {\n    if (this.getSysInfo()) {\n      return this.getSysInfo().device_id;\n    }\n    return \"\";\n  }\n\n  /**\n   * Cached value of `sysinfo.device_id`  if set.\n   */\n  get name(): string {\n    if (this.getSysInfo()) {\n      return Buffer.from(this.getSysInfo().nickname, \"base64\").toString(\"utf8\");\n    }\n    return \"\";\n  }\n\n  get model(): string {\n    if (this.getSysInfo()) {\n      return this.getSysInfo().model;\n    }\n    return \"\";\n  }\n\n  get serialNumber(): string {\n    if (this.getSysInfo()) {\n      this.getSysInfo().hw_id;\n    }\n    return \"\";\n  }\n\n  get firmwareRevision(): string {\n    if (this.getSysInfo()) {\n      return this.getSysInfo().fw_ver;\n    }\n    return \"\";\n  }\n\n  get hardwareRevision(): string {\n    if (this.getSysInfo()) {\n      return this.getSysInfo().hw_ver;\n    }\n    return \"\";\n  }\n\n  protected setSysInfo(sysInfo: PlugSysinfo) {\n    this._plugSysInfo = sysInfo;\n    this._plugSysInfo.last_update = Date.now();\n  }\n\n  public getSysInfo(): PlugSysinfo {\n    return this._plugSysInfo;\n  }\n\n  protected handleError(errorCode: number | string, line: string): boolean {\n    const errorMessage = this.ERROR_CODES[errorCode];\n    this.log.debug(line + \" Error Code: \" + errorCode + \", \" + errorMessage + \" \" + this.ip);\n\n    if (typeof errorCode === \"number\" && errorCode === 1003) {\n      this.is_klap = true;\n    }\n    return false;\n  }\n\n  protected async sendRequest(payload: string): Promise<boolean> {\n    if (this.tpLinkCipher) {\n      return this.handleRequest(payload)\n        .then((result) => {\n          return result ? true : false;\n        })\n        .catch((error) => {\n          if (error && error.message.indexOf(\"9999\") > 0 && this._reconnect_counter <= 3) {\n            return this.reconnect().then(() => {\n              return this.handleRequest(payload).then((result) => {\n                return result ? true : false;\n              });\n            });\n          }\n          this._reconnect_counter = 0;\n          return false;\n        });\n    } else {\n      return this.newHandleRequest(payload)\n        .then((result) => {\n          return result ? true : false;\n        })\n        .catch((error) => {\n          if (error && error.message.indexOf(\"9999\") > 0 && this._reconnect_counter <= 3) {\n            return this.newReconnect().then(() => {\n              return this.newHandleRequest(payload).then((result) => {\n                return result ? true : false;\n              });\n            });\n          }\n          this._reconnect_counter = 0;\n          return false;\n        });\n    }\n  }\n\n  protected async newSendRequest(payload: string): Promise<boolean> {\n    return this.handleRequest(payload)\n      .then((result) => {\n        return result ? true : false;\n      })\n      .catch((error) => {\n        this.log.debug(JSON.stringify(error));\n        if (error && error.message.indexOf(\"9999\") > 0 && this._reconnect_counter <= 3) {\n          return this.reconnect().then(() => {\n            return this.handleRequest(payload).then((result) => {\n              return result ? true : false;\n            });\n          });\n        }\n        this._reconnect_counter = 0;\n        return false;\n      });\n  }\n\n  protected handleRequest(payload: string): Promise<any> {\n    const URL = \"http://\" + this.ip + \"/app?token=\" + this.token;\n\n    const headers = {\n      Cookie: this.cookie,\n      Connection: \"Keep-Alive\",\n    };\n\n    if (this.tpLinkCipher) {\n      const encryptedPayload = this.tpLinkCipher.encrypt(payload);\n\n      const securePassthroughPayload = {\n        method: \"securePassthrough\",\n        params: {\n          request: encryptedPayload,\n        },\n      };\n\n      const config = {\n        headers: headers,\n        timeout: this._timeout * 1000,\n      };\n\n      return this.axios\n        .post(URL, securePassthroughPayload, config)\n        .then((res: AxiosResponse) => {\n          if (res.data.error_code) {\n            if (res.data.error_code === \"9999\" || (res.data.error_code === 9999 && this._reconnect_counter <= 3)) {\n              this.log.error(\" Error Code: \" + res.data.error_code + \", \" + this.ERROR_CODES[res.data.error_code]);\n              this.log.debug(\"Trying to reconnect...\");\n              return this.reconnect().then(() => {\n                return this.getDeviceInfo();\n              });\n            }\n            this._reconnect_counter = 0;\n            return this.handleError(res.data.error_code, \"357\");\n          }\n\n          const decryptedResponse = this.tpLinkCipher.decrypt(res.data.result.response);\n          try {\n            const response = JSON.parse(decryptedResponse);\n            this.log.debug(response);\n            if (response.error_code !== 0) {\n              return this.handleError(response.error_code, \"364\");\n            }\n            return response;\n          } catch (error) {\n            return this.handleError(JSON.parse(decryptedResponse).error_code, \"368\");\n          }\n        })\n        .catch((error: Error) => {\n          //return this.handleError(error.message, \"372\");\n        });\n    }\n    return new Promise<true>((resolve, reject) => {\n      reject();\n    });\n  }\n\n  protected newHandleRequest(payload: string): Promise<any> {\n    if (this.newTpLinkCipher) {\n      const data = this.newTpLinkCipher.encrypt(payload);\n\n      return this.raw_request(\"request\", data.encryptedPayload, \"arraybuffer\", { seq: data.seq.toString() })\n        .then((res) => {\n          return JSON.parse(this.newTpLinkCipher.decrypt(res));\n        })\n        .catch((error: Error) => {\n          return this.handleError(error.message, \"372\");\n        });\n    }\n    return new Promise<true>((resolve, reject) => {\n      reject();\n    });\n  }\n\n  protected async reconnect(): Promise<void> {\n    this._reconnect_counter++;\n    return this.handshake().then(() => {\n      this.login().then(() => {\n        return;\n      });\n    });\n  }\n\n  protected async newReconnect(): Promise<void> {\n    this._reconnect_counter++;\n    return this.handshake_new().then(() => {\n      return;\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["uuidv4", "TpLinkCipher", "res", "NewTpLinkCipher", "URL", "headers"]
}
